📄 git-collaboration-workflow.md
# GitHub Collaboration Workflow 🚀

## 1. Owner: Add Contributor
- Go to your GitHub repo → **Settings → Collaborators & Teams**
- Add contributor by their GitHub username
- Contributor accepts invite ✅

---

## 2. Both (Owner & Contributor): Clone Repo
```bash
git clone https://github.com/<your-username>/<repo-name>.git
cd <repo-name>

3. Create a New Branch (Don’t work directly on main)
git checkout -b feature/<your-change>

4. Make Changes → Stage → Commit
# edit files...

git add .
git commit -m "Added feature/fix"

5. Sync with Latest Main (to avoid conflicts)
git checkout main
git pull origin main      # get latest changes from GitHub

git checkout feature/<your-change>
git merge main            # merge updates into your branch

6. Push Branch to GitHub
git push origin feature/<your-change>

7. Create a Pull Request (PR)

Go to GitHub repo in browser

Click Compare & Pull Request

Base branch = main

Compare branch = feature/<your-change>

Add title + description

Click Create Pull Request

8. Owner: Review & Merge PR

Open PR → Review changes

Click Merge Pull Request → Confirm Merge

✅ Changes are now in main

9. Sync Everyone’s Local Main
git checkout main
git pull origin main

✅ End Resultgit reset --hard
git pull origin main


All contributors work in separate branches

Push changes → Raise PRs

Owner merges PRs into main

Everyone syncs with main
----------------------------------------------
changes after changes in github repo
git reset --hard
git pull origin main


  ===============================================
🚀 Git Commands Cheat Sheet (Local ↔ GitHub)
# Go inside your project folder
cd C:\Users\rates\Desktop\Git-folder

# Check what changed
git status

# Stage all changes
git add .

# Commit changes with a message
git commit -m "Added new feature"

# Push changes to GitHub
git push

# ---------------------------------------------------------
# If GitHub repo already has files (README, .gitignore, etc.)
# Option 1 (Recommended): Merge GitHub files into local
git pull origin main --allow-unrelated-histories
git push -u origin main

# Option 2 (Force Overwrite): Replace GitHub with local repo
git push origin main --force

=========================================================
🚀 Git Push Guide (Local → GitHub)
✅ First-Time Setup

Go inside your project folder:

cd C:\Users\rates\Desktop\Git-folder


Initialize Git (only once per project):

git init


Add remote GitHub repo (replace with your repo URL):

git remote add origin https://github.com/rateshivakumar/Soprts.git

✅ If GitHub Repo Already Has Some Files (like README)

You have 2 choices:
===================================
Option 1 (Recommended): Merge GitHub’s files into local

This way you don’t lose GitHub’s files.

git pull origin main --allow-unrelated-histories
git push -u origin main

Option 2 (Force Overwrite): Replace GitHub with your local repo

⚠️ Careful — this will delete everything in GitHub and replace it with your local project.

git push origin main --force
========================================
✅ Standard Workflow (Daily Use)

When you make changes in local and want to push to GitHub:

Check what changed

git status


Stage changes (all files)

git add .


Commit changes

git commit -m "Your message here"


Push to GitHub

git push

✅ Example Flow
git status
git add .
git commit -m "Added new feature"
git push

✅ Useful Tips

Add a specific file instead of all:

git add filename.txt


Check commit history (short):

git log --oneline


Pull latest changes from GitHub before pushing (safe practice):

git pull origin main

#######################################################################



