Absolutely! Let’s create a step-by-step Docker + Docker Compose setup for your backend + two frontend apps (web + mobile). This will be clean, scalable, and production-friendly.

Step 1: Organize Your Project Structure
MyApp/
├── backend/
│   ├── Dockerfile
│   ├── package.json
│   ├── server.js
│   └── ...
├── frontend/
│   ├── web/
│   │   ├── Dockerfile
│   │   ├── package.json
│   │   └── src/
│   └── mobile/
│       ├── Dockerfile
│       ├── package.json
│       └── src/
└── docker-compose.yml


Each app has its own Dockerfile.

docker-compose.yml manages how all containers run together.

Step 2: Create Backend Dockerfile

backend/Dockerfile:

FROM node:18-alpine

WORKDIR /app
COPY package*.json ./
RUN npm install --production

COPY . .

EXPOSE 3000
CMD ["node", "server.js"]


Exposes port 3000 for backend API.

Step 3: Create Web Frontend Dockerfile

frontend/web/Dockerfile:

# Build stage
FROM node:18-alpine as build
WORKDIR /app
COPY package*.json ./
RUN npm install
COPY . .
RUN npm run build

# Serve with Nginx
FROM nginx:alpine
COPY --from=build /app/build /usr/share/nginx/html
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]


Serves web app via Nginx on port 80.

Step 4: Create Mobile Frontend Dockerfile

frontend/mobile/Dockerfile:

# Build stage
FROM node:18-alpine as build
WORKDIR /app
COPY package*.json ./
RUN npm install
COPY . .
RUN npm run build

# Serve with Nginx
FROM nginx:alpine
COPY --from=build /app/build /usr/share/nginx/html
EXPOSE 81
CMD ["nginx", "-g", "daemon off;"]


Serves mobile frontend via Nginx on port 81.

Step 5: Create Docker Compose File

docker-compose.yml:

version: "3.8"

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"

  web-frontend:
    build:
      context: ./frontend/web
      dockerfile: Dockerfile
    ports:
      - "80:80"

  mobile-frontend:
    build:
      context: ./frontend/mobile
      dockerfile: Dockerfile
    ports:
      - "81:80"


Automatically creates a network for all services.

Mobile and web apps can call backend using http://backend:3000 inside Docker network.

Step 6: Build and Run Containers

Run this from project root:

docker-compose up --build


Web frontend → http://localhost

Mobile frontend → http://localhost:81

Backend API → http://localhost:3000

Step 7: Optional - Run in Detached Mode
docker-compose up -d --build


Runs all containers in background.

Check logs:

docker-compose logs -f backend
docker-compose logs -f web-frontend
docker-compose logs -f mobile-frontend
