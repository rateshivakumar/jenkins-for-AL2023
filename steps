Perfect ðŸ’¯ â€” youâ€™ve written a nice Jenkins declarative pipeline that covers Checkout â†’ Install â†’ SonarQube â†’ Package â†’ Nexus â†’ DockerHub.
Letâ€™s go step by step (like youâ€™d explain in an interview or configure in real life). Iâ€™ll break this into:

Pre-requisites (Jenkins setup + external tools)

Pipeline stage-by-stage explanation + configuration

Where Docker fits in and what you must configure

ðŸ”¹ 1. Pre-requisites Before Running Pipeline
Jenkins Plugins Needed

Git Plugin â†’ for git step.

NodeJS Plugin â†’ for tools { nodejs 'NodeJS' }.

SonarQube Scanner Plugin â†’ for withSonarQubeEnv.

Credentials Binding Plugin â†’ for secrets (Sonar token, DockerHub, Nexus).

Nexus Artifact Uploader Plugin â†’ for uploading .tar.gz.

Docker Pipeline Plugin â†’ for Docker build & push.

Jenkins Global Tool Configuration

NodeJS installation â†’ Manage Jenkins â†’ Tools â†’ NodeJS installations â†’ Name it NodeJS.

SonarQube Scanner â†’ Manage Jenkins â†’ Tools â†’ SonarQube Scanner installations â†’ Name it SonarQubeScanner.

SonarQube Server â†’ Manage Jenkins â†’ System â†’ SonarQube servers â†’ Name it sonar (must match pipeline).

Jenkins Credentials Setup

sonar-scanner â†’ store SonarQube token as Secret Text.

nexus â†’ store Nexus username/password as Username with password.

dockerhub â†’ store DockerHub username/password as Username with password.

External Tools Setup

SonarQube server running â†’ accessible at $SONAR_HOST_URL.

Nexus server running at http://3.109.152.197:8081.

DockerHub account with repo rateshivakumar/zaltixschool.

ðŸ”¹ 2. Pipeline Stage-by-Stage Explanation
Stage 1: Checkout Code
git branch: 'main',
    url: 'https://github.com/rateshivakumar/ZaltixSchool.git'


Pulls code from your GitHub repo (branch main).

Jenkins needs Git plugin and access to GitHub (public repo works without creds).

Stage 2: Install Dependencies
dir('backend') {
    sh 'npm install'
}


Moves into backend folder.

Installs dependencies from package.json.

Requires NodeJS tool configured (your tools { nodejs 'NodeJS' } automatically sets PATH).

Stage 3: SonarQube Analysis
withSonarQubeEnv('sonar') {
  withCredentials([string(credentialsId: 'sonar-scanner', variable: 'SONAR_TOKEN')]) {
    withEnv(["PATH+SONAR=${tool 'SonarQubeScanner'}/bin"]) {
      sh '''
        sonar-scanner \
          -Dsonar.projectKey=ZaltixSchool \
          -Dsonar.sources=backend \
          -Dsonar.host.url=$SONAR_HOST_URL \
          -Dsonar.login=$SONAR_TOKEN
      '''
    }
  }
}


Connects to SonarQube server configured in Jenkins as sonar.

Injects Sonar token securely.

Runs sonar-scanner to analyze backend code quality & security.

Stage 4: Package Node.js App
cd backend
tar -czf ZaltixSchool-1.0.0.tar.gz *
mv ZaltixSchool-1.0.0.tar.gz ../


Compresses backend app into .tar.gz.

Moves artifact to root workspace (Jenkins default).

Stage 5: Upload Artifact to Nexus
nexusArtifactUploader(
    artifacts: [[
        artifactId: 'ZaltixSchool',
        file: 'ZaltixSchool-1.0.0.tar.gz',
        type: 'tar.gz'
    ]],
    credentialsId: 'nexus',
    groupId: 'in.zaltix.school',
    nexusUrl: '3.109.152.197:8081',
    repository: 'nodejs',
    version: '1.0.0'
)


Uploads artifact to Nexus Repository (nodejs).

Credentials (nexus) are injected securely.

Now your packaged app is stored in Nexus like Maven/Gradle artifacts.

Stage 6: Build & Push Docker Image
docker.withRegistry('https://index.docker.io/v1/', 'dockerhub') {
    def app = docker.build("rateshivakumar/zaltixschool:latest")
    app.push()
    app.push("1.0.0")
}


Builds a Docker image from Dockerfile in repo root (by default).

Pushes image to DockerHub under your account:

latest tag

1.0.0 version tag

ðŸ‘‰ Important: You must have a valid Dockerfile in your repo root (or specify path). Example for Node.js backend:

# Base Image
FROM node:18-alpine

# Set working directory
WORKDIR /app

# Copy package.json & install deps
COPY backend/package*.json ./
RUN npm install

# Copy source code
COPY backend/ .

# Expose port
EXPOSE 8080

# Start app
CMD ["npm", "start"]

ðŸ”¹ 3. Jenkins Commands & How to Run

After saving pipeline:

Start Jenkins job â†’ Jenkins clones repo.

Install dependencies â†’ npm install.

Run SonarQube â†’ Code analysis pushed to SonarQube UI.

Package app â†’ Creates .tar.gz.

Upload to Nexus â†’ Artifact stored in http://3.109.152.197:8081/repository/nodejs/.

Build Docker image â†’ Builds Node.js backend Docker image.

Push Docker image â†’ Uploads to DockerHub (rateshivakumar/zaltixschool).

âœ… After successful run:

SonarQube Dashboard â†’ code quality report.

Nexus Repo â†’ .tar.gz artifact stored.

DockerHub Repo â†’ Node.js image (latest, 1.0.0).
